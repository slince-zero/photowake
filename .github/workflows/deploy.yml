name: Deploy to Production

on:
  push:
    branches: [main] # main 分支有推送时触发
  pull_request:
    branches: [main] # 有 PR 到 main 分支时触发

# 环境变量
env:
  DOCKER_REGISTRY: ghcr.io # GitHub Container Registry
  # ${{ github.repository }} 仓库全名 (用户名/仓库名)
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  HEALTH_CHECK_RETRIES: 5
  HEALTH_CHECK_INTERVAL: 10

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 生成版本号
      - name: Generate version
        id: version
        run: |
          # 使用时间戳和git短hash组合作为版本号
          echo "version=$(date +%Y%m%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # 将镜像名称转换为小写
      - name: Convert image names to lowercase
        run: |
          echo "IMAGE_NAME_FRONTEND=$(echo ${{ github.repository }}-frontend | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "IMAGE_NAME_BACKEND=$(echo ${{ github.repository }}-backend | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # 登录到 GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Github 自动提供的 token

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./web
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-20.04
    env:
      VERSION: ${{ needs.build.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      # 配置 SSH
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 添加服务器到已知主机
      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      # 测试 SSH 连接（要在 ‘添加服务器到已知主机’ 进行，一种安全机制）
      - name: Test SSH Connection
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo 'SSH connection successful'"
      # 部署到服务器
      - name: Deploy to server
        id: deploy
        run: |
          echo "=== Starting Deployment ==="
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
            set -e  # 任何命令失败立即退出
            cd /home/photowake

            mkdir -p web server
            # 创建前端环境文件
            cat > web/.env << EOF
            # 添加前端需要的环境变量
            NEXT_PUBLIC_API_URL=http://199.245.101.224:3080/api
            # ... 其他前端环境变量
            EOF

            # 创建后端环境文件
            cat > server/.env << EOF
            # 添加后端需要的环境变量
            # ...
            EOF

            chmod 600 web/.env server/.env
            
            # 备份当前的 docker-compose.yml
            cp docker-compose.yml docker-compose.yml.backup
            
            # 停止并删除所有相关容器
            docker-compose down || true
            
            # 拉取新版本镜像
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ env.VERSION }}
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ env.VERSION }}
            
            # 更新 docker-compose.yml 中的镜像标签
            sed -i "s|image: .*frontend:.*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ env.VERSION }}|" docker-compose.yml
            sed -i "s|image: .*backend:.*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ env.VERSION }}|" docker-compose.yml
            
            # 启动新容器
            docker-compose up -d --force-recreate
          ENDSSH

      # 健康检查
      - name: Health check
        run: |
          for i in $(seq 1 ${{ env.HEALTH_CHECK_RETRIES }}); do
            echo "Health check attempt $i of ${{ env.HEALTH_CHECK_RETRIES }}"
            if curl -f http://${{ secrets.SERVER_IP }}/health; then
              echo "Health check passed"
              exit 0
            fi
            if [ $i -lt ${{ env.HEALTH_CHECK_RETRIES }} ]; then
              echo "Waiting ${{ env.HEALTH_CHECK_INTERVAL }} seconds before next attempt..."
              sleep ${{ env.HEALTH_CHECK_INTERVAL }}
            fi
          done
          echo "Health check failed after ${{ env.HEALTH_CHECK_RETRIES }} attempts"
          exit 1

      - name: Cleanup
        if: always()
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
            cd /home/photowake
            # 清理旧的备份文件
            rm -f docker-compose.yml.backup
            # 清理未使用的镜像和容器
            docker system prune -af --volumes
          ENDSSH
